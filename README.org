#+TITLE: Build Wire Cell With Spack

* Prerequisites

This package uses Spack to build Wire Cell Toolkit or Prototype and its major dependencies.
Some dependencies must be provided by your OS.  In particular:

- A suitable C++11 compiler (GCC 4.9+ or GCC 5+)
- X11 and other system libraries.
- Ability to download source packages

Notes:

 - Spack uses =curl= to download.  If you live behind a proxy set you environment appropriately.

* Prepare the build environment

Get this package's source and cause a copy of Spack to be retrieved:

#+BEGIN_EXAMPLE
  $ git clone https://github.com/wirecell/wire-cell-spack.git
  $ cd wire-cell-spack
  $ git submodule init
  $ git submodule update
#+END_EXAMPLE

* Set up Spack.

One time setup:

#+BEGIN_EXAMPLE
  $ source spack/share/spack/setup-env.sh
  $ spack repo add repo
#+END_EXAMPLE

Beware that if you use Spack in other contexts, adding a repo is a
global operation and may cause interference.  Check your =~/.spack=
directory if you suspect this.

#+BEGIN_EXAMPLE
  $ spack list
#+END_EXAMPLE

You should find various Wire Cell packages, ROOT, etc listed.

Anytime you revisit this project from a fresh shell session you will need to repeat the set up:

#+BEGIN_EXAMPLE
  $ source spack/share/spack/setup-env.sh
#+END_EXAMPLE

* Install

One command is needed to install everything.  As discussed above, be sure to indicate a non-default compiler if needed on your OS.

#+BEGIN_EXAMPLE
  $ spack install <packagename> [%<compiler>@<version>]
#+END_EXAMPLE

What to install depends on what you want.  Possible options:

- =wirecell-toolkit= :: install the toolkit and its externals
- =wirecell-prototype= :: install the prototype code (note: not yet added - message me about it if you want it.)
- =root= ::  just install ROOT6 and its externals

Example:
#+BEGIN_EXAMPLE
  $ spack install wirecell-toolkit
#+END_EXAMPLE

* Running 

See below for options for developers.  For users, Spack can also set environment variables needed to use the software.  It does this through the [[http://modules.sf.net/][Environment Modules]] system which needs to be installed and configured.  On Ubuntu and similar:

#+BEGIN_EXAMPLE
  $ sudo apt-get install environment-modules
  $ source /usr/share/modules/init/bash 
  $ source spack/share/spack/setup-env.sh
#+END_EXAMPLE

You can then activate the package you installed above:

#+BEGIN_EXAMPLE
  $ spack load wirecell-toolkit
  $ wire-cell -h
#+END_EXAMPLE


* Development

You can also use this package to provide a development environment.  There are a few approaches described below which have different trade offs in the amount of set up and features.  Pick which one you like best.

** In-situ debug of build failures

To debug failed builds or if you want to do development right inside the source used by Spack you can.  It involves three steps. 

1) tell Spack to stage the source or to keep it after the install stage terminates
 #+BEGIN_EXAMPLE
  $ spack stage wirecell-toolkit
  # or
  $ spack --keep-stage install wirecell-toolkit
 #+END_EXAMPLE
2) enter the build environment
 #+BEGIN_EXAMPLE
  $ spack env wirecell-toolkit /bin/bash
 #+END_EXAMPLE
3) change to the build directory
 #+BEGIN_EXAMPLE
  $ cd $(spack location -s wirecell-toolkit)/wire-cell-build/
 #+END_EXAMPLE

Some things to know if working in the build environment.

- A log is made by the =wcb= build tool and is found in =build/config.log=
- It has a line at the top =using wcb....= which shows the =configure= command.  Since Spack has long paths, it's useful to copy-paste this line if the =./wcb configure= command needs repeating.
- The build environment is still "owned" by Spack.  In particular a =spack uninstall= can wipe it out
- Spack gets the source via the anonymous GitHub URL.  If you need to push commits you may wish to do:

#+BEGIN_EXAMPLE
  $ git commit ...
  $ ./switch-git-urls dev
  $ git push
  $ ./switch-git-urls  # ... switch back, if desired
#+END_EXAMPLE

- When done hacking, you can go back to normal build environment and rebuild, possibly after doing a clean, to confirm your fixes are good.

#+BEGIN_EXAMPLE
  $ exit  # <-- exit build environment
  $ spack clean wirecell-toolkit
  $ spack install wirecell-toolkit
#+END_EXAMPLE

- To start over 

#+BEGIN_EXAMPLE
  $ exit  # <-- exit build environment
  $ spack uninstall [-a] wirecell-toolkit
  $ spack install wirecell-toolkit
#+END_EXAMPLE


** Using Spack Views

A Spack View is a unified directory hierarchy (single =lib/=, =bin/=, etc directories) with symbolic links to the actual Spack-installed package files.  It allows for a very simple development environment which is close to developing against the familiar system locations (=/usr/lib=, =/usr/include=, etc).

In the example below, a filesystem "view" of all the packages needed by =wirecell-toolkit= is made while the =wirecell-toolkit= package itself is excluded as you will provide a development version.  The "view" will be created in the directory =$HOME/wct-dev= but any writable location can be chosen.

#+BEGIN_EXAMPLE
  $ spack view -e wirecell-toolkit add $HOME/wct-dev wirecell-toolkit 
  $ ls $HOME/wct-dev
#+END_EXAMPLE

Through this view all =bin/=, =lib/= and =include/= files can be easily located and =PATH=-like variables need only one entry:

#+BEGIN_EXAMPLE
  $ export PATH=$HOME/wct-dev/bin:$PATH
  $ export PKG_CONFIG_PATH_PATH=$HOME/wct-dev/lib/pkgconfig:$HOME/wct-dev/share/pkgconfig
  $ export LD_LIBRARY_PATH=$HOME/wct-dev/lib
#+END_EXAMPLE

Due to the use of =RPATH= by Spack, setting =LD_LIBRARY_PATH= may not even be needed for some operations.  The =PKG_CONFIG_PATH= will be checked to find externals.

You can then clone a copy of the Wire Cell code build package, configure and build:

#+BEGIN_EXAMPLE
  $ git clone https://github.com/wirecell/wire-cell-build.git toolkit
  $ cd toolkit/
  $ ./wcb configure --prefix=$HOME/wct-dev \
       --boost-includes=$HOME/wct-dev/include --boost-libs=$HOME/wct-dev/lib --boost-mt 
  $ ./wcb build install
#+END_EXAMPLE

Note, this example will also install Wire Cell Toolikit, itself, right into the view directory.  Some other installation location can also be chosen but then =PATH=-like variables will need an update, accordingly.


* Development of this package

Some notes on developing the =wire-cell-spack= package itself.

** Add new version

#+BEGIN_EXAMPLE
  $ spack checksum --keep-stage root 6.07.06
  ...
	version('6.07.06', '1180254be7ece0f16142b14381b22d68')
#+END_EXAMPLE

This line can be pasted into the =root/package.py= file.


