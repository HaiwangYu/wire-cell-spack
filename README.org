This package provides [[https://github.com/llnl/spack][Spack]] support for building [[https://wirecell.github.io/][Wire Cell Toolkit]] and [[http://bnlif.github.io/wire-cell-docs/][Wire Cell Prototype]] software and/or their software dependencies.

* Prerequisites

Before using this package you will need:

- A suitable C++14 compiler, eg: GCC 4.9 or GCC 5.x, Clang (less tested)
- X11 and other system libraries. (see below)
- Ability to download source packages
- Working network connection.  (Spack uses =curl= to download.  Set any needed HTTP proxy variables.)

Although ROOT is not used in the core of Wire Cell Toolkit, it is used for some units tests and it provides a good summary of what OS packages are likely needed.  See [[https://root.cern.ch/build-prerequisites][this page]] for details.  But, not all packages listed there are needed as Spack will build them.  See below for setting up Spack.  When you have, you can find out what packages Spack will build by doing:

#+BEGIN_EXAMPLE
  $ spack spec wirecell-toolkit
#+END_EXAMPLE

For Ubuntu, this is a minimum:

#+BEGIN_EXAMPLE
  $ sudo apt-get install libx11-dev libxpm-dev libxft-dev libxext-dev 
#+END_EXAMPLE

* Prepare the build environment

Get this package's source and use =git submodule= to get a copy of Spack:

#+BEGIN_EXAMPLE
  $ git clone https://github.com/wirecell/wire-cell-spack.git
  $ cd wire-cell-spack
  $ git submodule init
  $ git submodule update
#+END_EXAMPLE

* Set up Spack.

One time setup:

#+BEGIN_EXAMPLE
  $ source spack/share/spack/setup-env.sh
  $ spack repo add repo
#+END_EXAMPLE

Notes:

- =bash= is the recommended shell.  =tcsh= users may try sourcing =setup-env.sh= but are on their own.
- Beware that if you use Spack in other contexts, adding a repo is a global operation and may cause interference.  Check your =~/.spack= directory if you suspect this.

* Install

One command is needed to install everything.

#+BEGIN_EXAMPLE
  $ spack install wirecell-toolkit
#+END_EXAMPLE


* Running 

*Developers*, you may want to skip this section.  For *end users*, Spack can set the environment variables needed to use the software it installed.  It does this through the [[http://modules.sf.net/][Environment Modules]] (EM) system.  EM needs to be installed and configured outside of Spack.  On Ubuntu and similar:

#+BEGIN_EXAMPLE
  $ sudo apt-get install environment-modules
  $ source /usr/share/modules/init/bash 
  $ source spack/share/spack/setup-env.sh
#+END_EXAMPLE

You can then activate the package you installed above:

#+BEGIN_EXAMPLE
  $ spack load wirecell-toolkit
  $ wire-cell -h
#+END_EXAMPLE


* Development

You can develop Wire Cell Toolkit, itself, using the external packages built by Spack as above in a variety of ways. Each section below describes one approach.  The first one is recommended.

** Using Spack Views

A "Spack View" produces a simple, single-rooted directory tree with shared =lib/=, =bin/=, =include/= etc directories in a way similar to =/usr/local=.  The files produced by =spack install= are merged into the directory tree with symbolic links with the =spack view= command.  This command takes one or more "seed" packages and builds the "view" from them and all their dependencies.  The command can also be given a list of packages to /exclude/ from the view.  For an environment in which to develop =wirecellt-toolkit= we want all of the toolkit's externals but not the toolkit itself as we will build and install that manually as part of our development.  

Describing all that takes much more than just running the command:

#+BEGIN_EXAMPLE
  $ spack view -e wirecell-toolkit add $HOME/wct-dev wirecell-toolkit 
  $ ls -l $HOME/wct-dev
  $ ls -l $HOME/wct-dev/lib
#+END_EXAMPLE

You must now set up minimal set of standard environment variables pointing into the view:

#+BEGIN_EXAMPLE
  $ export PATH=$HOME/wct-dev/bin:$PATH
  $ export PKG_CONFIG_PATH=$HOME/wct-dev/lib/pkgconfig:$HOME/wct-dev/share/pkgconfig
  $ export LD_LIBRARY_PATH=$HOME/wct-dev/lib
#+END_EXAMPLE

For =tcsh= users, change to =setenv= accordingly.  *Note:* once the view is made you no longer need Spack and in particular you do *not* need to source the =spack-env.sh= file to use this view.

You can then clone a copy of the Wire Cell Toolkit code build package, configure and build:

#+BEGIN_EXAMPLE
  $ git clone https://github.com/wirecell/wire-cell-build.git toolkit
  $ cd toolkit/
  $ ./wcb configure --prefix=$HOME/wct-dev \
       --boost-includes=$HOME/wct-dev/include --boost-libs=$HOME/wct-dev/lib --boost-mt 
  $ ./wcb build install
#+END_EXAMPLE

Notes:

- Take care to observe the output of this =configure= command to see that externals are found in your view.

- The installation location (=--prefix=) also uses the Spack View.  That's okay.

- You can pick a different =--prefix= but then you must add yet again this location to =PATH= like variables. 

-  In general, external are found by setting =PKG_CONFIG_PATH= however, for now, you must explicitly point to where Boost is installed.  Run "./wcb --help" for a full list of options.


** Using Environment Modules

Basically follow section on [[Running]] and then run =./wcb configure --with-PACKAGE== pointing to all the fine-grained installation locations.  Details on this are t.b.d.

** In-situ debug of build failures

To debug failed builds or if you want to do development right inside the source used by Spack you can.  It involves three steps. 

1) tell Spack to stage the source or to keep it after the install stage terminates
 #+BEGIN_EXAMPLE
  $ spack stage wirecell-toolkit
  # or
  $ spack --keep-stage install wirecell-toolkit
 #+END_EXAMPLE
2) enter the build environment
 #+BEGIN_EXAMPLE
  $ spack env wirecell-toolkit /bin/bash
 #+END_EXAMPLE
3) change to the build directory
 #+BEGIN_EXAMPLE
  $ cd $(spack location -s wirecell-toolkit)/wire-cell-build/
 #+END_EXAMPLE

Some things to know if working in the build environment.

- A log is made by the =wcb= build tool and is found in =build/config.log=
- It has a line at the top =using wcb....= which shows the =configure= command.  Since Spack has long paths, it's useful to copy-paste this line if the =./wcb configure= command needs repeating.
- The build environment is still "owned" by Spack.  In particular a =spack uninstall= can wipe it out
- Spack gets the source via the anonymous GitHub URL.  If you need to push commits you may wish to do:

#+BEGIN_EXAMPLE
  $ git commit ...
  $ ./switch-git-urls dev
  $ git push
  $ ./switch-git-urls  # ... switch back, if desired
#+END_EXAMPLE

- When done hacking, you can go back to normal build environment and rebuild, possibly after doing a clean, to confirm your fixes are good.

#+BEGIN_EXAMPLE
  $ exit  # <-- exit build environment
  $ spack clean wirecell-toolkit
  $ spack install wirecell-toolkit
#+END_EXAMPLE

- To start over 

#+BEGIN_EXAMPLE
  $ exit  # <-- exit build environment
  $ spack uninstall [-a] wirecell-toolkit
  $ spack install wirecell-toolkit
#+END_EXAMPLE




* Development of this package

Some notes on developing the =wire-cell-spack= package itself.

** Add new version

#+BEGIN_EXAMPLE
  $ spack checksum --keep-stage root 6.07.06
  ...
	version('6.07.06', '1180254be7ece0f16142b14381b22d68')
#+END_EXAMPLE

This line can be pasted into the =root/package.py= file.


