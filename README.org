#+TITLE: Build Wire Cell With Spack

This package provides support for using [[https://github.com/llnl/spack][Spack]] v0.10 to build the [[https://wirecell.github.io/][Wire Cell Toolkit]], the [[http://bnlif.github.io/wire-cell-docs/][Wire Cell Prototype]] software and/or their software dependencies.

* I'm feeling lucky

#+BEGIN_EXAMPLE
  $ git clone --recursive https://github.com/wirecell/wire-cell-spack.git
  $ cd wire-cell-spack
  $ source spack/share/spack/setup-env.sh
  $ spack repo add repo
  $ spack install wirecell-toolkit
#+END_EXAMPLE

* Prerequisites

Before using this package you will need:

- A suitable C++14 compiler, eg: GCC 4.9 or GCC 5.x, Clang (less tested)
- X11 and other system libraries. (see below)
- Ability to download source packages
- Working network connection.  (Spack uses =curl= to download.  Set any needed HTTP proxy variables.)

For Ubuntu, a minimum set of OS packages are installed with:

#+BEGIN_EXAMPLE
  $ sudo apt-get install libx11-dev libxpm-dev libxft-dev libxext-dev 
  $ sudo apt-get install libglu1-mesa-dev libglew-dev
#+END_EXAMPLE

The second set are required for Eve support in ROOT which may be useful, but not strictly needed by Wire-Cell.
ROOT provides [[https://root.cern.ch/build-prerequisites][this page]] listing what it needs in general. 
Spack will provide some of these as shown by the output of:

#+BEGIN_EXAMPLE
  $ spack spec wirecell-toolkit
#+END_EXAMPLE

The difference between these two sets must be provided by your OS or other means.

* Prepare the build environment

#+BEGIN_EXAMPLE
  $ git clone --recursive https://github.com/wirecell/wire-cell-spack.git
  $ cd wire-cell-spack
#+END_EXAMPLE

This will also clone a particular copy of Spack into the ~spack/~ submodule.

* Set up Spack.

#+BEGIN_EXAMPLE
  $ source spack/share/spack/setup-env.sh
  $ spack repo add repo
#+END_EXAMPLE

Notes:

- =bash= is the recommended shell.  =tcsh= users may try sourcing =setup-env.csh= but are on their own.
- Beware if you maintain more than one Spack area (specifically more than one set of Spack repos).  Adding a repo is a global operation and may cause interference.  Check your =~/.spack/linux/repos.yaml= file.
- If you have multiple compilers installed on your system it's recommended to check which one Spack will use by running =spack compliers=.  More info in the Compiler configuration section of Spack's [[http://spack.readthedocs.io/en/latest/getting_started.html][Getting Started]] manual section. 
- If your system does not have an adequate compiler you can [[http://spack.readthedocs.io/en/latest/getting_started.html?highlight=compilers#build-your-own-compiler][use Spack to build one]].
- By default, Spack will use =/tmp= for build temporaries and will install results under the directory where Spack source was cloned (=wire-cell-spack/spack/=).  These locations can be changed by editing =spack/etc/spack/defaults/config.yaml= before continuing on to the [[Install]] section below.

* Install

One command is needed to install everything.

#+BEGIN_EXAMPLE
  $ spack install wirecell-toolkit@dev      # (1)
  $ spack install wirecell-toolkit@0.6.2    # (2)
  $ spack install wirecell-prototype        # (3)
#+END_EXAMPLE

Notes:

1) Install the *development* version (tip of ~master~ branch) of the Wire Cell *Toolkit* (see also [[Development]] below).
2) Install *release 0.6.2* of the Wire Cell *Toolkit* (see [[https://github.com/WireCell/wire-cell-build/releases][available releases]])
3) Install the *development* version (tip of ~master~ branch) of the Wire Cell *Prototype*

* Troubleshooting the Install

Some known problems and their solutions are given here.

** Failure to download a package source

The number one failure mode is failure to download some source package.  This can be intermittent or due to your local network policies.  The best way to avoid this is to make or use a [[http://spack.readthedocs.io/en/latest/mirrors.html][Spack source mirror]].  BNL provides one which can be used by running:

#+BEGIN_EXAMPLE
  $ spack mirror add bnl http://www.phy.bnl.gov/~bviren/wire-cell-spack-mirror/
#+END_EXAMPLE

This modifies =~/.spack/linux/mirrors.yaml=.  You may choose to manually mirror this mirror to your own server or local directory.  For the latter you'd register your own mirror like:

#+BEGIN_EXAMPLE
  $ spack mirror add mymirror file:///path/to/mymirror
#+END_EXAMPLE

You may also be able to supply Spack with source packages on a case-by-case basis by adding source archives under =spack/var/spack/cache/<package>/=.

* Running 

*Developers*, you may want to skip this section.  For *end users*, Spack can set the environment variables needed to use the software it installed.  It does this through the [[http://modules.sf.net/][Environment Modules]] (EM) system.  EM needs to be installed and configured outside of Spack.  On Ubuntu and similar:

#+BEGIN_EXAMPLE
  $ sudo apt-get install environment-modules
  $ source /usr/share/modules/init/bash 
  $ source spack/share/spack/setup-env.sh
#+END_EXAMPLE

You can then activate the package you installed above:

#+BEGIN_EXAMPLE
  $ spack load wirecell-toolkit
  $ wire-cell -h
#+END_EXAMPLE

End users may also prefer the "Spack view" approach described below.

* Development

You can develop Wire Cell Toolkit, itself, using the external packages built by Spack as above in a variety of ways. Each section below describes one approach.  The first one is recommended.

** Using Spack Views

A "Spack View" produces a simple, single-rooted directory tree with shared =lib/=, =bin/=, =include/= etc directories in a way similar to =/usr/local=.  The files produced by =spack install= are merged into the directory tree with symbolic links with the =spack view= command.  This command takes one or more "seed" packages and builds the "view" from them and all their dependencies.  The command can also be given a list of packages to /exclude/ from the view.  For an environment in which to develop =wirecellt-toolkit= we want all of the toolkit's externals but not the toolkit itself as we will build and install that manually as part of our development.  

Describing all that takes much more than just running the command:

#+BEGIN_EXAMPLE
  $ spack view -e wirecell-toolkit add $HOME/wct-dev wirecell-toolkit 
  $ ls -l $HOME/wct-dev
  $ ls -l $HOME/wct-dev/lib
#+END_EXAMPLE

You must now set up minimal set of standard environment variables pointing into the view:

#+BEGIN_EXAMPLE
  $ export PATH=$HOME/wct-dev/bin:$PATH
  $ export PKG_CONFIG_PATH=$HOME/wct-dev/lib/pkgconfig:$HOME/wct-dev/share/pkgconfig
  $ export LD_LIBRARY_PATH=$HOME/wct-dev/lib
#+END_EXAMPLE

For =tcsh= users, change to =setenv= accordingly.  *Note:* once the view is made you no longer need Spack and in particular you do *not* need to source the =spack-env.sh= file to use this view.

You can then clone a copy of the Wire Cell Toolkit code build package, configure and build:

#+BEGIN_EXAMPLE
  $ git clone https://github.com/wirecell/wire-cell-build.git toolkit
  $ cd toolkit/
  $ ./wcb configure --prefix=$HOME/wct-dev \
       --boost-includes=$HOME/wct-dev/include --boost-libs=$HOME/wct-dev/lib --boost-mt 
  $ ./wcb build install
#+END_EXAMPLE

Notes:

- Take care to observe the output of this =configure= command to see that externals are found in your view.

- The installation location (=--prefix=) also uses the Spack View.  That's okay.

- You can pick a different =--prefix= but then you must add yet again this location to =PATH= like variables. 

-  In general, external are found by setting =PKG_CONFIG_PATH= however, for now, you must explicitly point to where Boost is installed.  Run "./wcb --help" for a full list of options.

** Updating Spack Views

From time to time it is required to update the version of a
dependency.  For example, an update to Jsonnet to 0.10.0 was needed.  To
build it and add it to the view created above one does:

#+BEGIN_EXAMPLE
  $ cd wire-cell-spack
  $ git pull
  $ source spack/share/spack/setup-env.sh
  $ spack install jsonnet  # note 0.10.0 is built and installed
  $ spack view add $HOME/wct-dev jsonnet@0.10.0
#+END_EXAMPLE

If that fails, it will print out something like:

#+BEGIN_EXAMPLE
  ==> Error: [/opt/spack/views/wct-dev] Package conflict detected:
     (Linked) jsonnet@0.9.3%gcc@5.4.0 arch=linux-ubuntu16.04-x86_64 /cxnybtl
  (Specified) jsonnet@0.10.0%gcc@5.4.0 arch=linux-ubuntu16.04-x86_64 /62mg6uo
#+END_EXAMPLE

Remove the old Jsonnet using the hash and re-add like:

#+BEGIN_EXAMPLE
  $ spack view remove /opt/spack/views/wct-dev jsonnet/cxnybtl
  $ spack view add /opt/spack/views/wct-dev jsonnet@0.10.0
#+END_EXAMPLE

You will now very likely need to rebuild your WCT or WCP development area.

** Using Environment Modules

Basically follow section on [[Running]] and then run =./wcb configure --with-PACKAGE== pointing to all the fine-grained installation locations.  Details on this are t.b.d.

** In-situ debug of build failures

To debug failed builds or if you want to do development right inside the source used by Spack you can.  It involves three steps. 

1) tell Spack to stage the source or to keep it after the install stage terminates
 #+BEGIN_EXAMPLE
  $ spack stage wirecell-toolkit
  # or
  $ spack --keep-stage install wirecell-toolkit
 #+END_EXAMPLE
2) enter the build environment
 #+BEGIN_EXAMPLE
  $ spack env wirecell-toolkit /bin/bash
 #+END_EXAMPLE
3) change to the build directory
 #+BEGIN_EXAMPLE
  $ cd $(spack location -s wirecell-toolkit)/wire-cell-build/
 #+END_EXAMPLE

Some things to know if working in the build environment.

- A log is made by the =wcb= build tool and is found in =build/config.log=
- It has a line at the top =using wcb....= which shows the =configure= command.  Since Spack has long paths, it's useful to copy-paste this line if the =./wcb configure= command needs repeating.
- The build environment is still "owned" by Spack.  In particular a =spack uninstall= can wipe it out
- Spack gets the source via the anonymous GitHub URL.  If you need to push commits you may wish to do:

#+BEGIN_EXAMPLE
  $ git commit ...
  $ ./switch-git-urls dev
  $ git push
  $ ./switch-git-urls  # ... switch back, if desired
#+END_EXAMPLE

- When done hacking, you can go back to normal build environment and rebuild, possibly after doing a clean, to confirm your fixes are good.

#+BEGIN_EXAMPLE
  $ exit  # <-- exit build environment
  $ spack clean wirecell-toolkit
  $ spack install wirecell-toolkit
#+END_EXAMPLE

- To start over 

#+BEGIN_EXAMPLE
  $ exit  # <-- exit build environment
  $ spack uninstall [-a] wirecell-toolkit
  $ spack install wirecell-toolkit
#+END_EXAMPLE




* Development of this package

Some notes on developing the =wire-cell-spack= package itself.

** Add new version of external

#+BEGIN_EXAMPLE
  $ spack checksum --keep-stage root 6.07.06
  ...
	version('6.07.06', '1180254be7ece0f16142b14381b22d68')
#+END_EXAMPLE

This line can be pasted into the [[./repo/packages/root/package.py]] file.

** Add a new version of WCT

Released versions of WCT can be added with a line like:

#+BEGIN_EXAMPLE
    version('0.6.2', git="https://github.com/WireCell/wire-cell-build.git", tag="0.6.2")
#+END_EXAMPLE

added to [[./repo/packages/wirecell-toolkit/package.py]].

** Mirror 

The source package mirror is rather manual to update.

#+BEGIN_EXAMPLE
$ spack mirror create -D -d ~/public_html/wire-cell-spack-mirror <package>
# or just target one
$ spack mirror create -d ~/public_html/wire-cell-spack-mirror <package>@<version>
#+END_EXAMPLE

